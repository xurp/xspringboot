一:配置
1. pom里加了minio，hutool，oss相关（阿里和七牛），docker-maven-plugin（应该是mvn时自动build，不用docker build），aliyun nexus
2. Dockerfile：expose是申明容器开什么端口，其实没开，还是要用-p指定，或者用-P随机（随即时候会制定成expose的端口）。用了add和touch（创建文件），其实用copy好
3. 修改了docker-compose的端口和配置文件，这个文件就是起到docker start的容器编排作用
4. logback-spring.xml里，根据不同的环境配置了不同的日志级别
5. generator.propertie是在common.utils.GenUtils用的,这个类是一个代码生成器   工具类
6. application进行了profiles和mybaits-plus的配置,然后再dev,pro和test里配置不同的mysql.com.zaxxer.hikari.HikariDataSource是默认的数据源,也可以用druid
7. resource.template下的vm文件都是自动生成代码用的,见https://www.cnblogs.com/woshixiangshang/p/8818198.html

二:后台
1. authentication包(以及config包里的ShiroConfig)是做shiro和JWT认证的.数据库里的sys_user_token(id,token,expire_time,update_time)是配套的.
   ShiroConfig主要定义了不需要权限的路径;OAuth2Filter是做权限过滤的规则;OAuth2Realm是设置角色、权限和认证信息;TokenGenerator是生成token
2. aspect里用AOP截取加了注解SysLog的地方,进行简单日志处理
3. base里抽象类,如从shiro获取User
4. exception里的Handler不仅截取自定义的异常类(要自己抛),还截取了DuplicateKeyException,AuthorizationException和Exception(也可以只截取Exception,然后分instanceof处理).自定义了RRexception
5. utils包,其中IPUtils可以在nginx代理下获取真实IP, R就是seckill的result包里的Result(用来返回给前台), seckill还多了个CodeMsg, 封装错误码和desc, Result会解析,
        这样可以用Result.error(CodeMsg.SESSION_ERROR)返回, 而R是继承了HashMap,以键值对方式返回,这样值也用k-v返回, 而Result里专门搞了个T data,在success时给data赋值.
   SpringContextUtils实现了ApplicationContextAware,这是专门在不归spring管的类(比如oss.cloud.OSSFactory类上没有spring注解)获取bean(service)的,
        如SpringContextUtils.getBean("sysConfigService").
6. validator和validator.group包，是比较特殊的校验方法。validateEntity封装了hibernate的Validate,参数是校验的对象和组.Assert里写了简单的验证方法如isBlank,抛RRexception.然后有几个空接口类,
   addGroup,updateGroup,AliyunGroup等,接口Group配置了@GroupSequence定义校验顺序，如果AddGroup组失败，则UpdateGroup组不会再校验.
7. xss包封装了一些注入或xss过滤的工具类,其中XssFilter是Filter的
8. config包,FilterConfig注解了@Configuration,用FilterRegistrationBean注册了XssFilter和shiroFilter(在ShiroConfig下边的bean).KaptchaConfig是调用验证码的配置.
   MyBatisPlusConfig是配置自己开发的分页插件.RedisTemplateConfig是配置redisTemplate.shiroConfig主要配置要权限过滤的路径.WebMvcConfig负责注册interceptor,并加了跨域支持.
9. interceptor包,AuthorizationInterceptor主要做shiro+JWT的权限认证,LoginUserHandlerMethodArgumentResolver是测试自定义解析器的注入.
10 apkversion相关: APK应该是安卓的一种东西(APP).ApkVersionService借口用了IService(封装的mybatis),其实现类继承了ServiceImpl用处一样,ApkVersionMapper继承了BaseMapper作用也一样
   (应该是配合resource里的ApkVersionmapper.xml的).ApkVersion是实体类,类似APP的版本信息.ApkVersionController是简单的增删查改.
11 app.controller的TestController测试了@LoginUser和@AuthIgnore两个注解,似乎这两个注解都没实际应用到
12 gen相关:用作代码生成,似乎是写新建模块的?配合GenUtils和resources里面的vm,暂时不看,也可参考"一:配置"里的7
13 oss相关:和apkversion相关一样,似乎这里的service结合了mybatisplus之后,都是当repository来用了.SysOss实体存文件上传url,如http://oss.sukeintel.com/upload/20190401/e0a49.png
   CloudStorageService是抽象类,CloudStorageConfig是sys_config表里的CLOUD_STORAGE_CONFIG_KEY对应的json的value,以实体类的方式配置云的参数.
   OSSFactory根据目前数据库里的配置返回四个实际的cloudStorageService里相应的实例.四个实现了CloudStorageService的类调用自己类库的方法做上传操作.
14 ShiroService相关:一些关于user的工具类,和Shiro库不直接相关
15 config,log相关:简单的CRUD,针对config,log表
16 LoginController:使用了google的kapcha做验证码,以及一些登陆相关的,涉及到token,资源控制等
17 menu相关:主要是CRUD菜单,以及根据不同情况获取菜单,菜单和用户组权限的对应关系等
18 user和role相关:CRUD

三:前台
